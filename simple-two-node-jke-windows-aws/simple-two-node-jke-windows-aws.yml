heat_template_version: 2013-05-23

description: >
  A document-based template to configure your Software Defined Environment.

parameters:
  flavor:
    type: string
    description: Flavor to be used for compute instance
  image:
    type: string
    description: Image id to be used for compute instance
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  availability_zone:
    type: string
    description: Name of availability zone in which to create the instance
    default: 'nova'
  ucd_server_url:
    type: string
    description: The server URL for agent communication to UrbanCode Deploy. Do *not* add a trailing slash.
    default: 'http://192.168.27.100:8081'
  ucd_user:
    type: string
    description: The user credential for the UrbanCode Deploy server.
    default: 'PasswordIsAuthToken'
  ucd_password:
    type: string
    description: The user credential for the UrbanCode Deploy server.
    default: 'b10b1f13-c516-42ac-9dcf-9b42a821c028'
    hidden: true
  ucd_relay_url:
    type: string
    description: The server URL for an agent relay - leave as 'None' to enable agents to communicate with server directly.
    default: 'None'
  network_id:
    type: string
    description: Generated to reference 'public_network' network.
    default: 'TODO'
  timeout:
    type: string
    description: Generated
    default: '1440'
  mysql_security_group:
    type: string
    description: Security group to be used for compute instance
    default: 'TODO'
  was_liberty_security_group:
    type: string
    description: Security group to be used for compute instance
    default: 'TODO'
resources:
## REFERENCE {"public_network":{"type": "OS::Neutron::Net", "properties": {"name": "public_network", "network_id": "TODO"}}}

  Referenced_Image:
    type: OS::Nova::Server
    properties:
      networks:
          - port: { get_resource: Referenced_Image_port  }
      user_data_format: RAW
      user_data: {get_resource: ucd_agent_install}
      flavor: { get_param: flavor } 
      image: { get_param: image }
      key_name: { get_param: key_name } # Name of key-pair to be used for compute instance
      name: jkedbsrv
      availability_zone: { get_param: availability_zone }
      
  MySQL_Server:
    type: IBM::UrbanCode::SoftwareDeploy::UCD
    properties:
      apply_config: { get_resource: MySQL_Server_sw_config }
      server: Referenced_Image
      version: "LATEST" 
      agent_timeout: "360"

  MySQL_Server_sw_config:
    type: IBM::UrbanCode::SoftwareConfig::UCD
    properties: 
      name: "MySQL Server"
      component_process: deploy
      component_process_timeout: "300"
      ucd_server_url: { get_param: ucd_server_url } # these should come from resource_tree
      ucd_username: { get_param: ucd_user }
      ucd_password: { get_param: ucd_password }
      application: { get_attr: [resource_tree, application_name] }
      environment_name: { get_attr: [resource_tree, environment_name] }
      inputs:

  Referenced_Image1:
    type: OS::Nova::Server
    properties:
      user_data_format: RAW
      user_data: {get_resource: ucd_agent_install}
      networks:
          - port: { get_resource: Referenced_Image1_port  }
      flavor: { get_param: flavor } 
      image: { get_param: image }
      key_name: { get_param: key_name } # Name of key-pair to be used for compute instance
      name: libertysrv
      availability_zone: { get_param: availability_zone }

  jke.war:
    depends_on: jke.db
    type: IBM::UrbanCode::SoftwareDeploy::UCD
    properties:
      apply_config: { get_resource: jke.war_sw_config }
      server: Referenced_Image1
      version: "LATEST" 
      agent_timeout: { get_param: timeout }

  jke.war_sw_config:
    type: IBM::UrbanCode::SoftwareConfig::UCD
    properties: 
      name: "jke.war"
      component_process: deploy
      component_process_timeout: { get_param: timeout }
      ucd_server_url: { get_param: ucd_server_url } # these should come from resource_tree
      ucd_username: { get_param: ucd_user }
      ucd_password: { get_param: ucd_password }
      application: { get_attr: [resource_tree, application_name] }
      environment_name: { get_attr: [resource_tree, environment_name] }
      inputs:
        jke.db.host: { get_attr: [Referenced_Image, first_address] } # IP Address for 'jkedbsrv'   (key: Referenced_Image)
        liberty.install.dir: C:\IBM\WAS\Liberty

  WebSphere_Liberty_Profile:
    type: IBM::UrbanCode::SoftwareDeploy::UCD
    properties:
      apply_config: { get_resource: WebSphere_Liberty_Profile_sw_config }
      server: Referenced_Image1
      version: "LATEST" 
      agent_timeout: { get_param: timeout }  # Generated

  WebSphere_Liberty_Profile_sw_config:
    type: IBM::UrbanCode::SoftwareConfig::UCD
    properties: 
      name: "WebSphere Liberty Profile"
      component_process: deploy
      component_process_timeout: { get_param: timeout }  # Generated
      ucd_server_url: { get_param: ucd_server_url } # these should come from resource_tree
      ucd_username: { get_param: ucd_user }
      ucd_password: { get_param: ucd_password }
      application: { get_attr: [resource_tree, application_name] }
      environment_name: { get_attr: [resource_tree, environment_name] }
      inputs:
        liberty.install.dir: C:\IBM\WAS\Liberty

  Referenced_Image1_port:
    type: OS::Neutron::Port
    properties:
      security_groups:
          - { get_param: was_liberty_security_group }  # Security group to be used for compute instance
      network_id: { get_param: network_id }

  jke.db:
    depends_on: [WebSphere_Liberty_Profile, MySQL_Server]
    type: IBM::UrbanCode::SoftwareDeploy::UCD
    properties:
      apply_config: { get_resource: jke.db_sw_config }
      server: Referenced_Image
      version: "LATEST" 
      agent_timeout: { get_param: timeout }  # Generated

  jke.db_sw_config:
    type: IBM::UrbanCode::SoftwareConfig::UCD
    properties: 
      name: "jke.db"
      component_process: deploy
      component_process_timeout: { get_param: timeout }  # Generated
      ucd_server_url: { get_param: ucd_server_url } # these should come from resource_tree
      ucd_username: { get_param: ucd_user }
      ucd_password: { get_param: ucd_password }
      application: { get_attr: [resource_tree, application_name] }
      environment_name: { get_attr: [resource_tree, environment_name] }
      inputs:
        mysql.bin.dir : C:\MySQL\bin

  Referenced_Image_port:
    type: OS::Neutron::Port
    properties:
      security_groups:
          - { get_param: mysql_security_group }  # Security group to be used for compute instance
      network_id: { get_param: network_id }

  resource_tree:
    type: IBM::UrbanCode::ResourceTree
    properties:
       urbancode_deploy_url: { get_param: ucd_server_url }
       username: { get_param: ucd_user }
       password: { get_param: ucd_password }
       team_mappings:
       application: JKE
       base_resource_group:

  ucd_agent_install:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            <powershell>
            #ps1_sysnative
            [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
            $platform = "win"
            $Arch = "$platform-x86_64"
            if(0 -eq (Get-WmiObject -class "Win32_Processor" -namespace "root\cimV2" -compute .)){$Arch = "$platform-x86"}

            $AgentArchive = "ibm-ucd-agent-$Arch.zip"
            $UcdRemoteHost = "_ucd_server_url_"
            $AgentArgs = ""

            $WebClient = New-Object System.Net.WebClient
            $WebClient.Credentials = New-Object System.Net.NetworkCredential("_ucd_user_","_ucd_password_")
            If( "_ucd_relay_url_" -ne "None" )
            {
                $UcdRemoteHost="_ucd_relay_url_"
                $WebProxy = New-Object System.Net.WebProxy
                $WebProxy.Address = "_ucd_relay_url_" + ":20080"
                $WebClient.Proxy = $WebProxy
                $AgentArgs = "-r -d"
            }

            $Source="_ucd_server_url_/cli/version/downloadArtifacts?component=ucd-agent-$Arch&version=_agent_version_&singleFilePath=$AgentArchive"
            $Destination="$env:TEMP\$AgentArchive"

            $WebClient.DownloadFile($Source,$Destination)
            $shell = new-object -com shell.application
            $zip = $shell.NameSpace($Destination)
            foreach($item in $zip.items()){$shell.Namespace("$env:TEMP").copyhere($item)}

            $UcdAgentName = _agent_name_

            $args = @()
            $args += ("-t", "`"_agent_team_`"")
            $args += ("-s", "$UcdRemoteHost")
            $args += ("$AgentArgs")
            $args += ("-x", "start")
            $args += ("-n", "`"$UcdAgentName`"")
            $cmd = "$env:TEMP\ibm-ucd-agent-install\install-agent-with-options.ps1"

            Invoke-Expression "$cmd $args"
            </powershell>
          params:
            _agent_name_:
               str_replace:
                  template: |
                    "_application_name_._environment_name_"
                  params:
                    _application_name_: { get_attr: [resource_tree, application_name ] }
                    _environment_name_: { get_param: "OS::stack_name" }
            _ucd_server_url_: { get_param: ucd_server_url }
            _ucd_relay_url_: { get_param: ucd_relay_url }
            _ucd_user_ : { get_param: ucd_user }
            _ucd_password_ : { get_param: ucd_password }
            _agent_version_ : 7.1
            _agent_team_ :

outputs:
  blueprint_url:
    description: Blueprint Origin URL
    value:  http://192.168.27.100:8080/landscaper/view/projects?open=demo_00000000_0000_0000_0000_000000000012-OrionContent/blueprints/simple-two-node-jke-windows-aws/simple-two-node-jke-windows-aws.yml

